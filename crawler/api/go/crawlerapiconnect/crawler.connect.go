// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: crawlerapi/crawler.proto

package crawlerapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/curioswitch/cookchat/crawler/api/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CrawlerServiceName is the fully-qualified name of the CrawlerService service.
	CrawlerServiceName = "crawlerapi.CrawlerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CrawlerServiceCrawlCookpadUserProcedure is the fully-qualified name of the CrawlerService's
	// CrawlCookpadUser RPC.
	CrawlerServiceCrawlCookpadUserProcedure = "/crawlerapi.CrawlerService/CrawlCookpadUser"
	// CrawlerServiceCrawlCookpadRecipeProcedure is the fully-qualified name of the CrawlerService's
	// CrawlCookpadRecipe RPC.
	CrawlerServiceCrawlCookpadRecipeProcedure = "/crawlerapi.CrawlerService/CrawlCookpadRecipe"
)

// CrawlerServiceClient is a client for the crawlerapi.CrawlerService service.
type CrawlerServiceClient interface {
	// Crawl a cookpad user, crawling all of their recipes.
	CrawlCookpadUser(context.Context, *connect.Request[_go.CrawlCookpadUserRequest]) (*connect.Response[_go.CrawlCookpadUserResponse], error)
	// Crawl a cookpad recipe.
	CrawlCookpadRecipe(context.Context, *connect.Request[_go.CrawlCookpadRecipeRequest]) (*connect.Response[_go.CrawlCookpadRecipeResponse], error)
}

// NewCrawlerServiceClient constructs a client for the crawlerapi.CrawlerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCrawlerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CrawlerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	crawlerServiceMethods := _go.File_crawlerapi_crawler_proto.Services().ByName("CrawlerService").Methods()
	return &crawlerServiceClient{
		crawlCookpadUser: connect.NewClient[_go.CrawlCookpadUserRequest, _go.CrawlCookpadUserResponse](
			httpClient,
			baseURL+CrawlerServiceCrawlCookpadUserProcedure,
			connect.WithSchema(crawlerServiceMethods.ByName("CrawlCookpadUser")),
			connect.WithClientOptions(opts...),
		),
		crawlCookpadRecipe: connect.NewClient[_go.CrawlCookpadRecipeRequest, _go.CrawlCookpadRecipeResponse](
			httpClient,
			baseURL+CrawlerServiceCrawlCookpadRecipeProcedure,
			connect.WithSchema(crawlerServiceMethods.ByName("CrawlCookpadRecipe")),
			connect.WithClientOptions(opts...),
		),
	}
}

// crawlerServiceClient implements CrawlerServiceClient.
type crawlerServiceClient struct {
	crawlCookpadUser   *connect.Client[_go.CrawlCookpadUserRequest, _go.CrawlCookpadUserResponse]
	crawlCookpadRecipe *connect.Client[_go.CrawlCookpadRecipeRequest, _go.CrawlCookpadRecipeResponse]
}

// CrawlCookpadUser calls crawlerapi.CrawlerService.CrawlCookpadUser.
func (c *crawlerServiceClient) CrawlCookpadUser(ctx context.Context, req *connect.Request[_go.CrawlCookpadUserRequest]) (*connect.Response[_go.CrawlCookpadUserResponse], error) {
	return c.crawlCookpadUser.CallUnary(ctx, req)
}

// CrawlCookpadRecipe calls crawlerapi.CrawlerService.CrawlCookpadRecipe.
func (c *crawlerServiceClient) CrawlCookpadRecipe(ctx context.Context, req *connect.Request[_go.CrawlCookpadRecipeRequest]) (*connect.Response[_go.CrawlCookpadRecipeResponse], error) {
	return c.crawlCookpadRecipe.CallUnary(ctx, req)
}

// CrawlerServiceHandler is an implementation of the crawlerapi.CrawlerService service.
type CrawlerServiceHandler interface {
	// Crawl a cookpad user, crawling all of their recipes.
	CrawlCookpadUser(context.Context, *connect.Request[_go.CrawlCookpadUserRequest]) (*connect.Response[_go.CrawlCookpadUserResponse], error)
	// Crawl a cookpad recipe.
	CrawlCookpadRecipe(context.Context, *connect.Request[_go.CrawlCookpadRecipeRequest]) (*connect.Response[_go.CrawlCookpadRecipeResponse], error)
}

// NewCrawlerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCrawlerServiceHandler(svc CrawlerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	crawlerServiceMethods := _go.File_crawlerapi_crawler_proto.Services().ByName("CrawlerService").Methods()
	crawlerServiceCrawlCookpadUserHandler := connect.NewUnaryHandler(
		CrawlerServiceCrawlCookpadUserProcedure,
		svc.CrawlCookpadUser,
		connect.WithSchema(crawlerServiceMethods.ByName("CrawlCookpadUser")),
		connect.WithHandlerOptions(opts...),
	)
	crawlerServiceCrawlCookpadRecipeHandler := connect.NewUnaryHandler(
		CrawlerServiceCrawlCookpadRecipeProcedure,
		svc.CrawlCookpadRecipe,
		connect.WithSchema(crawlerServiceMethods.ByName("CrawlCookpadRecipe")),
		connect.WithHandlerOptions(opts...),
	)
	return "/crawlerapi.CrawlerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CrawlerServiceCrawlCookpadUserProcedure:
			crawlerServiceCrawlCookpadUserHandler.ServeHTTP(w, r)
		case CrawlerServiceCrawlCookpadRecipeProcedure:
			crawlerServiceCrawlCookpadRecipeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCrawlerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCrawlerServiceHandler struct{}

func (UnimplementedCrawlerServiceHandler) CrawlCookpadUser(context.Context, *connect.Request[_go.CrawlCookpadUserRequest]) (*connect.Response[_go.CrawlCookpadUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("crawlerapi.CrawlerService.CrawlCookpadUser is not implemented"))
}

func (UnimplementedCrawlerServiceHandler) CrawlCookpadRecipe(context.Context, *connect.Request[_go.CrawlCookpadRecipeRequest]) (*connect.Response[_go.CrawlCookpadRecipeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("crawlerapi.CrawlerService.CrawlCookpadRecipe is not implemented"))
}
