syntax = "proto3";

package frontendapi;

option go_package = "github.com/curioswitch/cookchat/frontend/api/go;frontendapi";

// The content of a chat message.
message ChatContent {
  oneof payload {
    // A text message.
    string message = 1;

    // An audio message.
    bytes audio = 2;
  }
}

// A request to send in a chat.
message ChatRequest {
  // The content of the chat message.
  ChatContent content = 1;

  // The recipe to chat about.
  string recipe = 2;
}

// A response in a chat.
message ChatResponse {
  // The content of the chat message.
  ChatContent content = 1;
}

// A chat service.
service ChatService {
  // Chat with a stream of messages.
  rpc Chat(stream ChatRequest) returns (stream ChatResponse);
}

// A request for FrontendService.GetRecipe.
message GetRecipeRequest {
  // The ID of the recipe to get.
  string recipe_id = 1;
}

// A response for FrontendService.GetRecipe.
message GetRecipeResponse {}

// A token returned to retrieve a subsequent page of items.
message Pagination {
  string last_id = 1;
}

// A snippet of a recipe for list views.
message RecipeSnippet {
  // The ID of the recipe.
  string id = 1;

  // The title of the recipe.
  string title = 2;

  // The summary of the recipe.
  string summary = 3;

  // The image URL of the recipe.
  string image_url = 4;
}

// A request for FrontendService.ListRecipes.
message ListRecipesRequest {
  // The pagination token for the next page of recipes.
  // If unset, the first page is returned.
  Pagination pagination = 1;
}

// A response for FrontendService.ListRecipes.
message ListRecipesResponse {
  // The recipes.
  repeated RecipeSnippet recipes = 1;

  // The pagination token for the next page of recipes.
  Pagination pagination = 2;
}

service FrontendService {
  // Get the recipe for a given recipe ID.
  rpc GetRecipe(GetRecipeRequest) returns (GetRecipeResponse);

  // Get the list of recipes.
  rpc ListRecipes(ListRecipesRequest) returns (ListRecipesResponse);
}
